import { InjectionToken, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output, Renderer2, Component, ContentChildren, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var SWSwipeCardConfig = /** @class */ (function () {
    function SWSwipeCardConfig() {
        this.likeColor = '104,159,56';
        this.dislikeColor = '193,3,2';
    }
    return SWSwipeCardConfig;
}());
/** @type {?} */
var SW_SWIPE_CARD_DEFAULT_OPTIONS = new InjectionToken('sw-swipe-card-default-options', {
    providedIn: 'root',
    factory: SW_SWIPE_CARD_DEFAULT_OPTIONS_FACTORY
});
/**
 * @return {?}
 */
function SW_SWIPE_CARD_DEFAULT_OPTIONS_FACTORY() {
    return new SWSwipeCardConfig();
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var SwipeableDirective = /** @class */ (function () {
    function SwipeableDirective(_defaultConfig, el, renderer) {
        this._defaultConfig = _defaultConfig;
        this.el = el;
        this.renderer = renderer;
        this.animationDuration = 200;
        this.isReleased = false;
        this.fixed = false;
        this.orientation = 'xy';
        this.released = new EventEmitter();
        this.swiped = new EventEmitter();
        this.className = true;
        this.element = el.nativeElement;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    SwipeableDirective.prototype.onPan = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.allowSwipe) {
            this.handleSwipeChange(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwipeableDirective.prototype.onPanEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.allowSwipe) {
            /** @type {?} */
            var conditionX = this.orientation.includes('x') && this.releaseRadius.x < Math.abs(event.deltaX || 0);
            /** @type {?} */
            var conditionY = this.orientation.includes('y') && this.releaseRadius.y < Math.abs(event.deltaY || 0);
            /** @type {?} */
            var like = this.isSwipePositive(event);
            (conditionX || conditionY) ? this.handleSwipeEnd(like) : this.handleCancelSwipe();
        }
    };
    Object.defineProperty(SwipeableDirective.prototype, "allowSwipe", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.fixed && !this.isReleased;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        window.clearTimeout(this.timeoutId);
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initializeOverlay();
        this.releaseRadius = { x: this.width / 4, y: this.height / 4 };
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.initializeOverlay = /**
     * @return {?}
     */
    function () {
        this.overlay = document.createElement('div');
        this.overlay.className = 'swipe-card-overlay';
        this.renderer.appendChild(this.element, this.overlay);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    SwipeableDirective.prototype.translate = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var x = _a.x, y = _a.y, _b = _a.rotate, rotate = _b === void 0 ? 0 : _b, _c = _a.duration, duration = _c === void 0 ? 0 : _c;
        /** @type {?} */
        var positionX = x && this.orientation.includes('x') ? (x) : 0;
        /** @type {?} */
        var positionY = y && this.orientation.includes('y') ? (y) : 0;
        this.renderer.setStyle(this.element, 'transition', "transform " + duration + "ms ease");
        this.renderer.setStyle(this.element, 'webkitTransform', "translate3d(" + positionX + "px, " + positionY + "px, 0) rotate(" + rotate + "deg)");
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwipeableDirective.prototype.handleSwipeChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var like = this.isSwipePositive(event);
        /** @type {?} */
        var opacity = Math.abs(event.distance) * 0.5 / this.element.offsetWidth;
        this.setBackgroundOverlay(like, opacity);
        this.translate({
            x: event.deltaX,
            y: event.deltaY,
            rotate: ((event.deltaX * 20) / this.element.clientWidth)
        });
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.handleCancelSwipe = /**
     * @return {?}
     */
    function () {
        this.resetBackgroundOverlay();
        this.translate({
            x: 0,
            y: 0,
            rotate: 0,
            duration: this.animationDuration
        });
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.resetElementStyles();
        this.resetBackgroundOverlay();
        this.renderer.removeChild(this.element, this.overlay);
        this.overlay = null;
    };
    /**
     * @param {?} like
     * @param {?} opacity
     * @return {?}
     */
    SwipeableDirective.prototype.setBackgroundOverlay = /**
     * @param {?} like
     * @param {?} opacity
     * @return {?}
     */
    function (like, opacity) {
        /** @type {?} */
        var color = like ? this._defaultConfig.likeColor : this._defaultConfig.dislikeColor;
        this.renderer.setStyle(this.overlay, 'transition', 'opacity 0s ease');
        this.renderer.setStyle(this.overlay, 'background-color', "rgba(" + color + ", " + opacity.toString() + ")");
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.resetBackgroundOverlay = /**
     * @return {?}
     */
    function () {
        this.renderer.setStyle(this.overlay, 'transition', "opacity " + this.animationDuration + "ms ease");
        this.renderer.setStyle(this.overlay, 'background-color', 'rgba(255,255,255,0)');
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.resetElementStyles = /**
     * @return {?}
     */
    function () {
        this.renderer.setStyle(this.element, 'transition', 'transform 0s ease');
        this.renderer.setStyle(this.element, 'webkitTransform', 'translate3d(0, 0, 0) rotate(0deg)');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwipeableDirective.prototype.isSwipePositive = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return (this.orientation === 'y' && event.deltaY < 0) || (this.orientation !== 'y' && event.deltaX > 0);
    };
    /**
     * @param {?} like
     * @return {?}
     */
    SwipeableDirective.prototype.removeOverlay = /**
     * @param {?} like
     * @return {?}
     */
    function (like) {
        var _a = this.element, offsetHeight = _a.offsetHeight, offsetWidth = _a.offsetWidth, clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
        /** @type {?} */
        var y = (offsetHeight + clientHeight) * (like ? -1 : 1);
        /** @type {?} */
        var x = (offsetWidth + clientWidth) * (like ? 1 : -1);
        this.setBackgroundOverlay(like, 0.35);
        this.translate({
            x: x, y: y,
            rotate: (x * 20) / clientWidth,
            duration: 800
        });
    };
    /**
     * @param {?} like
     * @return {?}
     */
    SwipeableDirective.prototype.handleSwipeEnd = /**
     * @param {?} like
     * @return {?}
     */
    function (like) {
        var _this = this;
        this.removeOverlay(like);
        this.isReleased = true;
        this.timeoutId = window.setTimeout(function () {
            _this.swiped.emit(like);
            _this.released.emit();
            _this.destroy();
        }, this.animationDuration);
    };
    /**
     * @param {?} like
     * @return {?}
     */
    SwipeableDirective.prototype.simulateSwipe = /**
     * @param {?} like
     * @return {?}
     */
    function (like) {
        this.handleSwipeEnd(like);
    };
    SwipeableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[swSwipeable]',
                },] },
    ];
    SwipeableDirective.ctorParameters = function () { return [
        { type: SWSwipeCardConfig, decorators: [{ type: Inject, args: [SW_SWIPE_CARD_DEFAULT_OPTIONS,] }] },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SwipeableDirective.propDecorators = {
        width: [{ type: HostBinding, args: ['style.width.px',] }, { type: Input }],
        height: [{ type: HostBinding, args: ['style.height.px',] }, { type: Input }],
        fixed: [{ type: Input }],
        orientation: [{ type: Input }],
        released: [{ type: Output }],
        swiped: [{ type: Output }],
        className: [{ type: HostBinding, args: ['class.swipe-card-heap',] }],
        onPan: [{ type: HostListener, args: ['pan', ['$event'],] }],
        onPanEnd: [{ type: HostListener, args: ['panend', ['$event'],] }]
    };
    return SwipeableDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var CardWrapperComponent = /** @class */ (function () {
    function CardWrapperComponent() {
    }
    /**
     * @return {?}
     */
    CardWrapperComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    CardWrapperComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    CardWrapperComponent.prototype.like = /**
     * @return {?}
     */
    function () {
        if (this.cards.first) {
            this.cards.first.simulateSwipe(true);
        }
    };
    /**
     * @return {?}
     */
    CardWrapperComponent.prototype.dislike = /**
     * @return {?}
     */
    function () {
        if (this.cards.first) {
            this.cards.first.simulateSwipe(false);
        }
    };
    CardWrapperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sw-card-wrapper',
                    template: "\n    <ng-content></ng-content>",
                    styles: [":host {\n    position: relative;\n    display: block;\n  }"]
                },] },
    ];
    CardWrapperComponent.ctorParameters = function () { return []; };
    CardWrapperComponent.propDecorators = {
        cards: [{ type: ContentChildren, args: [SwipeableDirective,] }]
    };
    return CardWrapperComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var SwipeCardLibModule = /** @class */ (function () {
    function SwipeCardLibModule() {
    }
    SwipeCardLibModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [CardWrapperComponent, SwipeableDirective],
                    exports: [CardWrapperComponent, SwipeableDirective]
                },] },
    ];
    return SwipeCardLibModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { SwipeCardLibModule, SWSwipeCardConfig, SW_SWIPE_CARD_DEFAULT_OPTIONS, SW_SWIPE_CARD_DEFAULT_OPTIONS_FACTORY, SwipeableDirective, CardWrapperComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc3dpcGUtY2FyZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmctc3dpcGUtY2FyZC9saWIvc3dpcGUtY2FyZC5jb25maWcudHMiLCJuZzovL25nLXN3aXBlLWNhcmQvbGliL3N3aXBlYWJsZS5kaXJlY3RpdmUudHMiLCJuZzovL25nLXN3aXBlLWNhcmQvbGliL2NhcmQtd3JhcHBlci5jb21wb25lbnQudHMiLCJuZzovL25nLXN3aXBlLWNhcmQvbGliL3N3aXBlLWNhcmQtbGliLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGlvblRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNsYXNzIFNXU3dpcGVDYXJkQ29uZmlnIHtcbiAgbGlrZUNvbG9yPzogc3RyaW5nID0gJzEwNCwxNTksNTYnO1xuICBkaXNsaWtlQ29sb3I/OiBzdHJpbmcgPSAnMTkzLDMsMic7XG59XG5cbmV4cG9ydCBjb25zdCBTV19TV0lQRV9DQVJEX0RFRkFVTFRfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbignc3ctc3dpcGUtY2FyZC1kZWZhdWx0LW9wdGlvbnMnLCB7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgZmFjdG9yeTogU1dfU1dJUEVfQ0FSRF9ERUZBVUxUX09QVElPTlNfRkFDVE9SWVxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBTV19TV0lQRV9DQVJEX0RFRkFVTFRfT1BUSU9OU19GQUNUT1JZKCkge1xuICByZXR1cm4gbmV3IFNXU3dpcGVDYXJkQ29uZmlnKCk7XG59XG4iLCJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCwgUmVuZGVyZXIyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U1dfU1dJUEVfQ0FSRF9ERUZBVUxUX09QVElPTlMsIFNXU3dpcGVDYXJkQ29uZmlnfSBmcm9tICcuL3N3aXBlLWNhcmQuY29uZmlnJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3N3U3dpcGVhYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIFN3aXBlYWJsZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSByZWFkb25seSBhbmltYXRpb25EdXJhdGlvbiA9IDIwMDtcbiAgcHJpdmF0ZSBpc1JlbGVhc2VkOiBCb29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgb3ZlcmxheTogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgcmVsZWFzZVJhZGl1czogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9O1xuICBwcml2YXRlIHRpbWVvdXRJZDogbnVtYmVyO1xuXG4gIEBIb3N0QmluZGluZygnc3R5bGUud2lkdGgucHgnKVxuICBASW5wdXQoKVxuICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmhlaWdodC5weCcpXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgZml4ZWQ6IEJvb2xlYW4gPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgb3JpZW50YXRpb24gPSAneHknO1xuXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgcmVsZWFzZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBzd2lwZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zd2lwZS1jYXJkLWhlYXAnKVxuICBwdWJsaWMgY2xhc3NOYW1lID0gdHJ1ZTtcblxuICBASG9zdExpc3RlbmVyKCdwYW4nLCBbJyRldmVudCddKVxuICBvblBhbihldmVudDogYW55KSB7XG4gICAgaWYgKHRoaXMuYWxsb3dTd2lwZSkge1xuICAgICAgdGhpcy5oYW5kbGVTd2lwZUNoYW5nZShldmVudCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigncGFuZW5kJywgWyckZXZlbnQnXSlcbiAgb25QYW5FbmQoZXZlbnQ6IGFueSkge1xuICAgIGlmICh0aGlzLmFsbG93U3dpcGUpIHtcbiAgICAgIGNvbnN0IGNvbmRpdGlvblggPSB0aGlzLm9yaWVudGF0aW9uLmluY2x1ZGVzKCd4JykgJiYgdGhpcy5yZWxlYXNlUmFkaXVzLnggPCBNYXRoLmFicyhldmVudC5kZWx0YVggfHwgMCk7XG4gICAgICBjb25zdCBjb25kaXRpb25ZID0gdGhpcy5vcmllbnRhdGlvbi5pbmNsdWRlcygneScpICYmIHRoaXMucmVsZWFzZVJhZGl1cy55IDwgTWF0aC5hYnMoZXZlbnQuZGVsdGFZIHx8IDApO1xuICAgICAgY29uc3QgbGlrZSA9IHRoaXMuaXNTd2lwZVBvc2l0aXZlKGV2ZW50KTtcblxuICAgICAgKGNvbmRpdGlvblggfHwgY29uZGl0aW9uWSkgPyB0aGlzLmhhbmRsZVN3aXBlRW5kKGxpa2UpIDogdGhpcy5oYW5kbGVDYW5jZWxTd2lwZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBhbGxvd1N3aXBlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5maXhlZCAmJiAhdGhpcy5pc1JlbGVhc2VkO1xuICB9XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChTV19TV0lQRV9DQVJEX0RFRkFVTFRfT1BUSU9OUykgcHJpdmF0ZSBfZGVmYXVsdENvbmZpZzogU1dTd2lwZUNhcmRDb25maWcsXG4gICAgICAgICAgICAgIHByb3RlY3RlZCBlbDogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgcHVibGljIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmluaXRpYWxpemVPdmVybGF5KCk7XG4gICAgdGhpcy5yZWxlYXNlUmFkaXVzID0ge3g6IHRoaXMud2lkdGggLyA0LCB5OiB0aGlzLmhlaWdodCAvIDR9O1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplT3ZlcmxheSgpOiB2b2lkIHtcbiAgICB0aGlzLm92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLm92ZXJsYXkuY2xhc3NOYW1lID0gJ3N3aXBlLWNhcmQtb3ZlcmxheSc7XG4gICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQsIHRoaXMub3ZlcmxheSk7XG4gIH1cblxuICBwcml2YXRlIHRyYW5zbGF0ZSh7eCwgeSwgcm90YXRlID0gMCwgZHVyYXRpb24gPSAwfSkge1xuICAgIGNvbnN0IHBvc2l0aW9uWCA9IHggJiYgdGhpcy5vcmllbnRhdGlvbi5pbmNsdWRlcygneCcpID8gKHgpIDogMDtcbiAgICBjb25zdCBwb3NpdGlvblkgPSB5ICYmIHRoaXMub3JpZW50YXRpb24uaW5jbHVkZXMoJ3knKSA/ICh5KSA6IDA7XG5cbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudCwgJ3RyYW5zaXRpb24nLCBgdHJhbnNmb3JtICR7ZHVyYXRpb259bXMgZWFzZWApO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50LCAnd2Via2l0VHJhbnNmb3JtJywgYHRyYW5zbGF0ZTNkKCR7cG9zaXRpb25YfXB4LCAke3Bvc2l0aW9uWX1weCwgMCkgcm90YXRlKCR7cm90YXRlfWRlZylgXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU3dpcGVDaGFuZ2UoZXZlbnQ6IGFueSkge1xuICAgIGNvbnN0IGxpa2UgPSB0aGlzLmlzU3dpcGVQb3NpdGl2ZShldmVudCk7XG4gICAgY29uc3Qgb3BhY2l0eSA9IE1hdGguYWJzKGV2ZW50LmRpc3RhbmNlKSAqIDAuNSAvIHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDtcblxuICAgIHRoaXMuc2V0QmFja2dyb3VuZE92ZXJsYXkobGlrZSwgb3BhY2l0eSk7XG4gICAgdGhpcy50cmFuc2xhdGUoe1xuICAgICAgeDogZXZlbnQuZGVsdGFYLFxuICAgICAgeTogZXZlbnQuZGVsdGFZLFxuICAgICAgcm90YXRlOiAoKGV2ZW50LmRlbHRhWCAqIDIwKSAvIHRoaXMuZWxlbWVudC5jbGllbnRXaWR0aClcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ2FuY2VsU3dpcGUoKSB7XG4gICAgdGhpcy5yZXNldEJhY2tncm91bmRPdmVybGF5KCk7XG4gICAgdGhpcy50cmFuc2xhdGUoe1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICByb3RhdGU6IDAsXG4gICAgICBkdXJhdGlvbjogdGhpcy5hbmltYXRpb25EdXJhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXN0cm95KCkge1xuICAgIHRoaXMucmVzZXRFbGVtZW50U3R5bGVzKCk7XG4gICAgdGhpcy5yZXNldEJhY2tncm91bmRPdmVybGF5KCk7XG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQsIHRoaXMub3ZlcmxheSk7XG4gICAgdGhpcy5vdmVybGF5ID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0QmFja2dyb3VuZE92ZXJsYXkobGlrZTogYm9vbGVhbiwgb3BhY2l0eTogbnVtYmVyKSB7XG4gICAgY29uc3QgY29sb3IgPSBsaWtlID8gdGhpcy5fZGVmYXVsdENvbmZpZy5saWtlQ29sb3IgOiB0aGlzLl9kZWZhdWx0Q29uZmlnLmRpc2xpa2VDb2xvcjtcblxuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5vdmVybGF5LCAndHJhbnNpdGlvbicsICdvcGFjaXR5IDBzIGVhc2UnKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMub3ZlcmxheSwgJ2JhY2tncm91bmQtY29sb3InLCBgcmdiYSgke2NvbG9yfSwgJHtvcGFjaXR5LnRvU3RyaW5nKCl9KWApO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldEJhY2tncm91bmRPdmVybGF5KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5vdmVybGF5LCAndHJhbnNpdGlvbicsIGBvcGFjaXR5ICR7dGhpcy5hbmltYXRpb25EdXJhdGlvbn1tcyBlYXNlYCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLm92ZXJsYXksICdiYWNrZ3JvdW5kLWNvbG9yJywgJ3JnYmEoMjU1LDI1NSwyNTUsMCknKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVzZXRFbGVtZW50U3R5bGVzKCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50LCAndHJhbnNpdGlvbicsICd0cmFuc2Zvcm0gMHMgZWFzZScpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50LCAnd2Via2l0VHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsIDAsIDApIHJvdGF0ZSgwZGVnKScpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1N3aXBlUG9zaXRpdmUoZXZlbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHRoaXMub3JpZW50YXRpb24gPT09ICd5JyAmJiBldmVudC5kZWx0YVkgPCAwKSB8fCAodGhpcy5vcmllbnRhdGlvbiAhPT0gJ3knICYmIGV2ZW50LmRlbHRhWCA+IDApO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVPdmVybGF5KGxpa2U6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCB7b2Zmc2V0SGVpZ2h0LCBvZmZzZXRXaWR0aCwgY2xpZW50SGVpZ2h0LCBjbGllbnRXaWR0aH0gPSB0aGlzLmVsZW1lbnQ7XG4gICAgY29uc3QgeSA9IChvZmZzZXRIZWlnaHQgKyBjbGllbnRIZWlnaHQpICogKGxpa2UgPyAtMSA6IDEpO1xuICAgIGNvbnN0IHggPSAob2Zmc2V0V2lkdGggKyBjbGllbnRXaWR0aCkgKiAobGlrZSA/IDEgOiAtMSk7XG5cbiAgICB0aGlzLnNldEJhY2tncm91bmRPdmVybGF5KGxpa2UsIDAuMzUpO1xuICAgIHRoaXMudHJhbnNsYXRlKHtcbiAgICAgIHgsIHksXG4gICAgICByb3RhdGU6ICh4ICogMjApIC8gY2xpZW50V2lkdGgsXG4gICAgICBkdXJhdGlvbjogODAwXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVN3aXBlRW5kKGxpa2U6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnJlbW92ZU92ZXJsYXkobGlrZSk7XG4gICAgdGhpcy5pc1JlbGVhc2VkID0gdHJ1ZTtcblxuICAgIHRoaXMudGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zd2lwZWQuZW1pdChsaWtlKTtcbiAgICAgIHRoaXMucmVsZWFzZWQuZW1pdCgpO1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfSwgdGhpcy5hbmltYXRpb25EdXJhdGlvbik7XG4gIH1cblxuICBwdWJsaWMgc2ltdWxhdGVTd2lwZShsaWtlOiBib29sZWFuKSB7XG4gICAgdGhpcy5oYW5kbGVTd2lwZUVuZChsaWtlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgT25Jbml0LCBRdWVyeUxpc3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTd2lwZWFibGVEaXJlY3RpdmV9IGZyb20gJy4vc3dpcGVhYmxlLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3N3LWNhcmQtd3JhcHBlcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIHN0eWxlczogW2A6aG9zdCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9YF1cbn0pXG5leHBvcnQgY2xhc3MgQ2FyZFdyYXBwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xuICBAQ29udGVudENoaWxkcmVuKFN3aXBlYWJsZURpcmVjdGl2ZSlcbiAgcHVibGljIGNhcmRzOiBRdWVyeUxpc3Q8U3dpcGVhYmxlRGlyZWN0aXZlPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICB9XG5cbiAgcHVibGljIGxpa2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY2FyZHMuZmlyc3QpIHtcbiAgICAgIHRoaXMuY2FyZHMuZmlyc3Quc2ltdWxhdGVTd2lwZSh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGlzbGlrZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jYXJkcy5maXJzdCkge1xuICAgICAgdGhpcy5jYXJkcy5maXJzdC5zaW11bGF0ZVN3aXBlKGZhbHNlKTtcbiAgICB9XG4gIH1cblxufVxuIiwiaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NhcmRXcmFwcGVyQ29tcG9uZW50fSBmcm9tICcuL2NhcmQtd3JhcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHtTd2lwZWFibGVEaXJlY3RpdmV9IGZyb20gJy4vc3dpcGVhYmxlLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtdLFxuICBkZWNsYXJhdGlvbnM6IFtDYXJkV3JhcHBlckNvbXBvbmVudCwgU3dpcGVhYmxlRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW0NhcmRXcmFwcGVyQ29tcG9uZW50LCBTd2lwZWFibGVEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIFN3aXBlQ2FyZExpYk1vZHVsZSB7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7SUFFQTtRQUNFLGNBQVMsR0FBWSxZQUFZLENBQUM7UUFDbEMsaUJBQVksR0FBWSxTQUFTLENBQUM7S0FDbkM7SUFBRCx3QkFBQztDQUFBLElBQUE7O0FBRUQsSUFBYSw2QkFBNkIsR0FBRyxJQUFJLGNBQWMsQ0FBQywrQkFBK0IsRUFBRTtJQUMvRixVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUscUNBQXFDO0NBQy9DLENBQUM7Ozs7QUFFRjtJQUNFLE9BQU8sSUFBSSxpQkFBaUIsRUFBRSxDQUFDO0NBQ2hDOzs7Ozs7QUNkRDtJQXNFRSw0QkFBMkQsY0FBaUMsRUFDdEUsRUFBYyxFQUNqQixRQUFtQjtRQUZxQixtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFDdEUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNqQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBdERyQixzQkFBaUIsR0FBRyxHQUFHLENBQUM7UUFDakMsZUFBVSxHQUFZLEtBQUssQ0FBQztRQWU3QixVQUFLLEdBQVksS0FBSyxDQUFDO1FBR3ZCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBR25CLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRzlCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBR3JDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUEyQnRCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztLQUNqQzs7Ozs7SUF6QkQsa0NBQUs7Ozs7SUFETCxVQUNNLEtBQVU7UUFDZCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9CO0tBQ0Y7Ozs7O0lBR0QscUNBQVE7Ozs7SUFEUixVQUNTLEtBQVU7UUFDakIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFOztnQkFDYixVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQzs7Z0JBQ2pHLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDOztnQkFDakcsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDO1lBRXhDLENBQUMsVUFBVSxJQUFJLFVBQVUsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQ25GO0tBQ0Y7SUFFRCxzQkFBSSwwQ0FBVTs7OztRQUFkO1lBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQ3hDOzs7T0FBQTs7OztJQVFELHdDQUFXOzs7SUFBWDtRQUNFLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3JDOzs7O0lBRUQscUNBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUMsQ0FBQztLQUM5RDs7OztJQUVPLDhDQUFpQjs7O0lBQXpCO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZEOzs7OztJQUVPLHNDQUFTOzs7O0lBQWpCLFVBQWtCLEVBQWdDO1lBQS9CLFFBQUMsRUFBRSxRQUFDLEVBQUUsY0FBVSxFQUFWLCtCQUFVLEVBQUUsZ0JBQVksRUFBWixpQ0FBWTs7WUFDekMsU0FBUyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7WUFDekQsU0FBUyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUUvRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxlQUFhLFFBQVEsWUFBUyxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxpQkFBZSxTQUFTLFlBQU8sU0FBUyxzQkFBaUIsTUFBTSxTQUFNLENBQzVILENBQUM7S0FDSDs7Ozs7SUFFTyw4Q0FBaUI7Ozs7SUFBekIsVUFBMEIsS0FBVTs7WUFDNUIsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDOztZQUNsQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVztRQUV6RSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDYixDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDZixDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDZixNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUN6RCxDQUFDLENBQUM7S0FDSjs7OztJQUVPLDhDQUFpQjs7O0lBQXpCO1FBQ0UsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNiLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixNQUFNLEVBQUUsQ0FBQztZQUNULFFBQVEsRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQ2pDLENBQUMsQ0FBQztLQUNKOzs7O0lBRU8sb0NBQU87OztJQUFmO1FBQ0UsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7S0FDckI7Ozs7OztJQUVPLGlEQUFvQjs7Ozs7SUFBNUIsVUFBNkIsSUFBYSxFQUFFLE9BQWU7O1lBQ25ELEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZO1FBRXJGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxVQUFRLEtBQUssVUFBSyxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQUcsQ0FBQyxDQUFDO0tBQ25HOzs7O0lBRU8sbURBQXNCOzs7SUFBOUI7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxhQUFXLElBQUksQ0FBQyxpQkFBaUIsWUFBUyxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0tBQ2pGOzs7O0lBRU8sK0NBQWtCOzs7SUFBMUI7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztLQUM5Rjs7Ozs7SUFFTyw0Q0FBZTs7OztJQUF2QixVQUF3QixLQUFLO1FBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsV0FBVyxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3pHOzs7OztJQUVPLDBDQUFhOzs7O0lBQXJCLFVBQXNCLElBQWE7UUFDM0IsSUFBQSxpQkFBcUUsRUFBcEUsOEJBQVksRUFBRSw0QkFBVyxFQUFFLDhCQUFZLEVBQUUsNEJBQVc7O1lBQ3JELENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxZQUFZLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7WUFDbkQsQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLFdBQVcsS0FBSyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXZELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNiLENBQUMsR0FBQSxFQUFFLENBQUMsR0FBQTtZQUNKLE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksV0FBVztZQUM5QixRQUFRLEVBQUUsR0FBRztTQUNkLENBQUMsQ0FBQztLQUNKOzs7OztJQUVPLDJDQUFjOzs7O0lBQXRCLFVBQXVCLElBQWE7UUFBcEMsaUJBU0M7UUFSQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBRXZCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztZQUNqQyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0tBQzVCOzs7OztJQUVNLDBDQUFhOzs7O0lBQXBCLFVBQXFCLElBQWE7UUFDaEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMzQjs7Z0JBbEtGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtpQkFDMUI7OztnQkFKc0MsaUJBQWlCLHVCQTBEekMsTUFBTSxTQUFDLDZCQUE2QjtnQkFwRWpELFVBQVU7Z0JBUUYsU0FBUzs7O3dCQWVoQixXQUFXLFNBQUMsZ0JBQWdCLGNBQzVCLEtBQUs7eUJBR0wsV0FBVyxTQUFDLGlCQUFpQixjQUM3QixLQUFLO3dCQUdMLEtBQUs7OEJBR0wsS0FBSzsyQkFHTCxNQUFNO3lCQUdOLE1BQU07NEJBR04sV0FBVyxTQUFDLHVCQUF1Qjt3QkFHbkMsWUFBWSxTQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQzsyQkFPOUIsWUFBWSxTQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUEwSHBDLHlCQUFDO0NBQUE7Ozs7OztBQ2pMRDtJQWdCRTtLQUNDOzs7O0lBRUQsdUNBQVE7OztJQUFSO0tBQ0M7Ozs7SUFFRCxpREFBa0I7OztJQUFsQjtLQUNDOzs7O0lBRU0sbUNBQUk7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtZQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEM7S0FDRjs7OztJQUVNLHNDQUFPOzs7SUFBZDtRQUNFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO0tBQ0Y7O2dCQWhDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsUUFBUSxFQUFFLGlDQUNrQjtvQkFDNUIsTUFBTSxFQUFFLENBQUMsNERBR1AsQ0FBQztpQkFDSjs7Ozt3QkFFRSxlQUFlLFNBQUMsa0JBQWtCOztJQXdCckMsMkJBQUM7Q0FBQTs7Ozs7O0FDckNEO0lBSUE7S0FNQzs7Z0JBTkEsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxFQUFFO29CQUNYLFlBQVksRUFBRSxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDO29CQUN4RCxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQztpQkFDcEQ7O0lBRUQseUJBQUM7Q0FBQTs7Ozs7Ozs7Ozs7Ozs7In0=