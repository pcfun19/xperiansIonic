/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output, Renderer2, } from '@angular/core';
import { SW_SWIPE_CARD_DEFAULT_OPTIONS, SWSwipeCardConfig } from './swipe-card.config';
var SwipeableDirective = /** @class */ (function () {
    function SwipeableDirective(_defaultConfig, el, renderer) {
        this._defaultConfig = _defaultConfig;
        this.el = el;
        this.renderer = renderer;
        this.animationDuration = 200;
        this.isReleased = false;
        this.fixed = false;
        this.orientation = 'xy';
        this.released = new EventEmitter();
        this.swiped = new EventEmitter();
        this.className = true;
        this.element = el.nativeElement;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    SwipeableDirective.prototype.onPan = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.allowSwipe) {
            this.handleSwipeChange(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwipeableDirective.prototype.onPanEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.allowSwipe) {
            /** @type {?} */
            var conditionX = this.orientation.includes('x') && this.releaseRadius.x < Math.abs(event.deltaX || 0);
            /** @type {?} */
            var conditionY = this.orientation.includes('y') && this.releaseRadius.y < Math.abs(event.deltaY || 0);
            /** @type {?} */
            var like = this.isSwipePositive(event);
            (conditionX || conditionY) ? this.handleSwipeEnd(like) : this.handleCancelSwipe();
        }
    };
    Object.defineProperty(SwipeableDirective.prototype, "allowSwipe", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.fixed && !this.isReleased;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        window.clearTimeout(this.timeoutId);
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initializeOverlay();
        this.releaseRadius = { x: this.width / 4, y: this.height / 4 };
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.initializeOverlay = /**
     * @return {?}
     */
    function () {
        this.overlay = document.createElement('div');
        this.overlay.className = 'swipe-card-overlay';
        this.renderer.appendChild(this.element, this.overlay);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    SwipeableDirective.prototype.translate = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var x = _a.x, y = _a.y, _b = _a.rotate, rotate = _b === void 0 ? 0 : _b, _c = _a.duration, duration = _c === void 0 ? 0 : _c;
        /** @type {?} */
        var positionX = x && this.orientation.includes('x') ? (x) : 0;
        /** @type {?} */
        var positionY = y && this.orientation.includes('y') ? (y) : 0;
        this.renderer.setStyle(this.element, 'transition', "transform " + duration + "ms ease");
        this.renderer.setStyle(this.element, 'webkitTransform', "translate3d(" + positionX + "px, " + positionY + "px, 0) rotate(" + rotate + "deg)");
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwipeableDirective.prototype.handleSwipeChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var like = this.isSwipePositive(event);
        /** @type {?} */
        var opacity = Math.abs(event.distance) * 0.5 / this.element.offsetWidth;
        this.setBackgroundOverlay(like, opacity);
        this.translate({
            x: event.deltaX,
            y: event.deltaY,
            rotate: ((event.deltaX * 20) / this.element.clientWidth)
        });
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.handleCancelSwipe = /**
     * @return {?}
     */
    function () {
        this.resetBackgroundOverlay();
        this.translate({
            x: 0,
            y: 0,
            rotate: 0,
            duration: this.animationDuration
        });
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.resetElementStyles();
        this.resetBackgroundOverlay();
        this.renderer.removeChild(this.element, this.overlay);
        this.overlay = null;
    };
    /**
     * @param {?} like
     * @param {?} opacity
     * @return {?}
     */
    SwipeableDirective.prototype.setBackgroundOverlay = /**
     * @param {?} like
     * @param {?} opacity
     * @return {?}
     */
    function (like, opacity) {
        /** @type {?} */
        var color = like ? this._defaultConfig.likeColor : this._defaultConfig.dislikeColor;
        this.renderer.setStyle(this.overlay, 'transition', 'opacity 0s ease');
        this.renderer.setStyle(this.overlay, 'background-color', "rgba(" + color + ", " + opacity.toString() + ")");
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.resetBackgroundOverlay = /**
     * @return {?}
     */
    function () {
        this.renderer.setStyle(this.overlay, 'transition', "opacity " + this.animationDuration + "ms ease");
        this.renderer.setStyle(this.overlay, 'background-color', 'rgba(255,255,255,0)');
    };
    /**
     * @return {?}
     */
    SwipeableDirective.prototype.resetElementStyles = /**
     * @return {?}
     */
    function () {
        this.renderer.setStyle(this.element, 'transition', 'transform 0s ease');
        this.renderer.setStyle(this.element, 'webkitTransform', 'translate3d(0, 0, 0) rotate(0deg)');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwipeableDirective.prototype.isSwipePositive = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return (this.orientation === 'y' && event.deltaY < 0) || (this.orientation !== 'y' && event.deltaX > 0);
    };
    /**
     * @param {?} like
     * @return {?}
     */
    SwipeableDirective.prototype.removeOverlay = /**
     * @param {?} like
     * @return {?}
     */
    function (like) {
        var _a = this.element, offsetHeight = _a.offsetHeight, offsetWidth = _a.offsetWidth, clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
        /** @type {?} */
        var y = (offsetHeight + clientHeight) * (like ? -1 : 1);
        /** @type {?} */
        var x = (offsetWidth + clientWidth) * (like ? 1 : -1);
        this.setBackgroundOverlay(like, 0.35);
        this.translate({
            x: x, y: y,
            rotate: (x * 20) / clientWidth,
            duration: 800
        });
    };
    /**
     * @param {?} like
     * @return {?}
     */
    SwipeableDirective.prototype.handleSwipeEnd = /**
     * @param {?} like
     * @return {?}
     */
    function (like) {
        var _this = this;
        this.removeOverlay(like);
        this.isReleased = true;
        this.timeoutId = window.setTimeout(function () {
            _this.swiped.emit(like);
            _this.released.emit();
            _this.destroy();
        }, this.animationDuration);
    };
    /**
     * @param {?} like
     * @return {?}
     */
    SwipeableDirective.prototype.simulateSwipe = /**
     * @param {?} like
     * @return {?}
     */
    function (like) {
        this.handleSwipeEnd(like);
    };
    SwipeableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[swSwipeable]',
                },] },
    ];
    SwipeableDirective.ctorParameters = function () { return [
        { type: SWSwipeCardConfig, decorators: [{ type: Inject, args: [SW_SWIPE_CARD_DEFAULT_OPTIONS,] }] },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SwipeableDirective.propDecorators = {
        width: [{ type: HostBinding, args: ['style.width.px',] }, { type: Input }],
        height: [{ type: HostBinding, args: ['style.height.px',] }, { type: Input }],
        fixed: [{ type: Input }],
        orientation: [{ type: Input }],
        released: [{ type: Output }],
        swiped: [{ type: Output }],
        className: [{ type: HostBinding, args: ['class.swipe-card-heap',] }],
        onPan: [{ type: HostListener, args: ['pan', ['$event'],] }],
        onPanEnd: [{ type: HostListener, args: ['panend', ['$event'],] }]
    };
    return SwipeableDirective;
}());
export { SwipeableDirective };
if (false) {
    /** @type {?} */
    SwipeableDirective.prototype.animationDuration;
    /** @type {?} */
    SwipeableDirective.prototype.isReleased;
    /** @type {?} */
    SwipeableDirective.prototype.element;
    /** @type {?} */
    SwipeableDirective.prototype.overlay;
    /** @type {?} */
    SwipeableDirective.prototype.releaseRadius;
    /** @type {?} */
    SwipeableDirective.prototype.timeoutId;
    /** @type {?} */
    SwipeableDirective.prototype.width;
    /** @type {?} */
    SwipeableDirective.prototype.height;
    /** @type {?} */
    SwipeableDirective.prototype.fixed;
    /** @type {?} */
    SwipeableDirective.prototype.orientation;
    /** @type {?} */
    SwipeableDirective.prototype.released;
    /** @type {?} */
    SwipeableDirective.prototype.swiped;
    /** @type {?} */
    SwipeableDirective.prototype.className;
    /** @type {?} */
    SwipeableDirective.prototype._defaultConfig;
    /** @type {?} */
    SwipeableDirective.prototype.el;
    /** @type {?} */
    SwipeableDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,